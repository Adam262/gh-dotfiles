# Per GH Cloud Platform, it is highly recommended to not set $AWS_PROFILE in your shell config. Many tools utilize the concept of the default profile. By explictly setting your profile in every shell, the default will never be used. In other words: $AWS_DEFAULT_PROFILE is for setting you "default" profile and $AWS_PROFILE is for explicitly setting it per-session/command.
export AWS_DEFAULT_PROFILE="dev.usw2"
export AWS_VAULT_BACKEND=file
export AWS_SDK_LOAD_CONFIG=true

aws-use() {
  local profile 
  profile="${1:-dev.usw2}";

  export AWS_PROFILE="$profile"
}

alias aws-logout='export AWS_VAULT="" && aws-vault remove -s support'
alias aws-sessions='aws-vault list | grep sso'

aws-ssm-set () {
  local name value;
  name="$1";
  value="$2";

  aws ssm put-parameter --name "$name" --type SecureString --value "$value" --overwrite
}

aws-ssm-get () {
  local name;
  name="$1";
  aws ssm get-parameter --name "$name" --with-decryption
}

aws-ssm-del () {
  local name;
  name="$1";
  aws ssm delete-parameter --name "$name"
}

aws-ssm-copy () {
  local name;
  name="$1"

  # jq -r is needed for raw string output
  aws-get-ssm $name | jq -r '.Parameter.Value' | pbcopy
}

aws-ssm-paste() {
  local name;
  name="$1"

  # quotes around subshell make sure all whitespace gets preserved as-is
  aws-ssm-set $name "$(pbpaste)" 
}

aws-list-profiles() {
   aws configure list-profiles | grep -v vaulted-
}

aws-ecr-login() {
  local registry
  registry="${1:-631819134151.dkr.ecr.us-east-1.amazonaws.com}";

  AWS_PROFILE="bastion.use1" aws ecr get-login-password | docker login --username AWS --password-stdin "$registry"
}

aws-irsa-assume-role() {
  local web_identity_token role_arn
  
  web_identity_token="$1"
  role_arn="$2"

  aws sts assume-role-with-web-identity --web-identity-token="${web_identity_token}" --role-arn="${role_arn}" --role-session-name=foo
}
