n2ip () {
    local text
    text="$1"

	aws ec2 describe-instances --filters "Name=tag:Name,Values=*${text}*" Name=instance-state-name,Values=running | jq -r '.Reservations[].Instances[] | [(.Tags[] | select(.Key == "Name").Value), .NetworkInterfaces[0].PrivateDnsName, (.InstanceId), (.State.Name), (.Tags[] | select(.Key == "aws:ec2launchtemplate:version").Value), (.LaunchTime)]  | join("\t")'
}

k-get-nodes () {
  local context
  context="${1:-dev.usw2}"

  for node in $(kubectl get no -l node-role.kubernetes.io/worker= -oname --context="$context" \
  | cut -d/ -f2); do printf "%s\t" "$node"; kubectl describe no $node --context="$context" \
  | awk '/Allocated/,/cpu/' \
  | grep cpu; done
} 

asgterm () {
    local instance_id
    instance_id="$1"

    aws autoscaling terminate-instance-in-auto-scaling-group --no-should-decrement-desired-capacity --instance-id "$instance_id"
}

ssl-cert-inspect () { 
    local cert-name
    cert-name=$1
    
    openssl x509 -in "/etc/ssl/certs/${cert-name}" -nout -text
}

prune-tf () {
    local infra_services="$HOME/Code/infrastructure/services"

    echo "Purging all '.terraform.lock.hcl' files from $infra_services"
    for lock in $(find "$infra_services" -name '.terraform.lock.hcl')
    do
            rm $lock
    done
    
    echo "Purging all '.terraform' directories from $infra_services"
    for dir in $(find "$infra_services" -type d -name '.terraform')
    do
            rm -rf $dir
    done
    
    echo "Purging all 'plan.*' files from $infra_services"
    for plan in $(find "$infra_services" -regex '.*plan.*')
    do
            rm $plan
    done
}

to_local(){
  echo "Moving state to local"
  if mv _state.tf _state.tf.local; then
    echo "Done"
    return 0
  else
    echo "Failed"
    return 1
  fi
}

to_remote(){
  echo "Moving state to remote"
  if mv _state.tf.local _state.tf; then
    echo "Done"
    return 0
  else
    echo "Failed"
    return 1
  fi
}

flipstate(){
  if [[ $# -eq 1 ]]; then
    case "$1" in
      local)
        to_local
      ;;
      remote)
        to_remote
      ;;
    esac
  else
    if [[ -f "_state.tf" ]]; then
      to_local
    else
      to_remote
    fi
  fi
}

alias sops="EDITOR='subl -w' sops" 
