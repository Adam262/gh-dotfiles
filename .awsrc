# use via aws-vault exec support <my command>

export AWS_PROFILE="dev.use1"
export AWS_VAULT_BACKEND=file
export AWS_SDK_LOAD_CONFIG=true

aws-vault-use   () {
  unset AWS_VAULT
  eval $(aws-vault exec "$@" -- env \
    | awk '/^AWS/ { print "export " $1 }')
}

alias aws-sup='aws-vault-use -d 12h support'
alias aws-logout='export AWS_VAULT="" && aws-vault remove -s support'
alias aws-get-user-keys='AWS_VAULT="" aws-vault exec support --no-session env | grep AWS'

aws-ssm-set () {
  local name value region;
  name="$1";
  value="$2";
  region="${3:-"us-east-1"}";

  aws ssm put-parameter --name "$name" --type SecureString --value "$value" --region "$region" --overwrite
}

aws-ssm-get () {
  local name region;
  name="$1";
  region="${2:-"us-east-1"}";
  aws ssm get-parameter --name "$name" --region "$region" --with-decryption
}

aws-ssm-del () {
  local name region;
  name="$1";
  region="${2:-"us-east-1"}";
  aws ssm delete-parameter --name "$name" --region "$region"
}

aws-ssm-copy () {
  local name region;
  name="$1"
  region="$2"

  # jq -r is needed for raw string output
  aws-get-ssm $name $region | jq -r '.Parameter.Value' | pbcopy
}

aws-ssm-paste() {
  local name region;
  name="$1"
  region="$2"

  # quotes around subshell make sure all whitespace gets preserved as-is
  aws-set-ssm $name "$(pbpaste)" $region --overwrite
}

aws-console () {
  cool_path="${1:-"iam"}";

  aws-vault login support-admin --path=$cool_path
}
